# VSDHDP
VSDHDP

# Table of Contents
- [Day 0](#Day-0)
- [Day 1 ](#Day-1)
- [Day 2 ](#Day-2)
- [Day 3 ](#Day-3)
- [Day 4 ](#Day-4)
- [Day 5 ](#Day-5)
- [Design Name ](#Design-Name)
- [Day 6 ](#Day-6)
- [Day 7 ](#Day-7)
- [Day 8 ](#Day-8)



# Day 0
Checking yosys

![](Day0/yosys.PNG)

Checking ngspice

![](Day0/ngspice.PNG)

Checking sta

![](Day0/sta.PNG)

Checking iverilog

![](Day0/iverilog.PNG)

Checking gtkwave

![](Day0/gtkwave.PNG)

# Day 1
## - Introduction to Verilog RTL design and Synthesis

Run iverilog and gtkwave on good_mux.v

![](Day1/good_mux.PNG)

Run yosys
```
yosys> read_liberty -lib ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
```

![](Day1/yosys1.PNG)

Read verilog file and run synth
```
yosys> read_verilog good_mux.v
yosys> synth -top good_mux
```

![](Day1/yosys2.PNG)

Run abc - generate the gate netlist

```
yosys> abc -liberty ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> show
```
Loos like libs contain cell mux

![](Day1/yosys3.PNG)


## Comand to write netlist

`noattr` - reduce netlist, easier to read.
```
write_verilog -noattr good_mux_netlist.v
!gvim good_mux_netlist.v
```


# Day 2
## - Timing Libs, Heirarchial vs Flat Synthesis And Efficient Flop Coding Styles

Libs syntax manual https://people.eecs.berkeley.edu/~alanmi/publications/other/liberty07_03.pdf

Libs files contain information about e.g. capacitance or leakage current or areafor each cell and for each version after PVT

PVT is the Process, Voltage, and Temperature.

![](Day2/PVT.jpg)

## Hierarchical vs Flat Synthesis

Example of multimodules

![](Day2/module.PNG)

Run yosys:

```
yosys> read_liberty -lib ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib 

1. Executing Liberty frontend.
Imported 428 cell types from liberty file.

yosys> read_verilog multiple_modules.v

2. Executing Verilog-2005 frontend: multiple_modules.v
Parsing Verilog input from `multiple_modules.v' to AST representation.
Generating RTLIL representation for module `\sub_module2'.
Generating RTLIL representation for module `\sub_module1'.
Generating RTLIL representation for module `\multiple_modules'.
Successfully finished Verilog frontend.

yosys> synth -top multiple_modules

...
3.25. Printing statistics.

=== multiple_modules ===

   Number of wires:                  5
   Number of wire bits:              5
   Number of public wires:           5
   Number of public wire bits:       5
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     sub_module1                     1
     sub_module2                     1

=== sub_module1 ===

   Number of wires:                  3
   Number of wire bits:              3
   Number of public wires:           3
   Number of public wire bits:       3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $_AND_                          1

=== sub_module2 ===

   Number of wires:                  3
   Number of wire bits:              3
   Number of public wires:           3
   Number of public wire bits:       3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $_OR_                           1

=== design hierarchy ===

   multiple_modules                  1
     sub_module1                     1
     sub_module2                     1

   Number of wires:                 11
   Number of wire bits:             11
   Number of public wires:          11
   Number of public wire bits:      11
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $_AND_                          1
     $_OR_                           1

3.26. Executing CHECK pass (checking for obvious problems).
Checking module multiple_modules...
Checking module sub_module1...
Checking module sub_module2...
Found and reported 0 problems.


yosys> abc -liberty ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib

yosys> show

5. Generating Graphviz representation of design.
ERROR: For formats different than 'ps' or 'dot' only one module must be selected.

yosys> show multiple_modules 
```

We got a hierarchical view instead of a view of the gates

![](Day2/test1.PNG)

Write netlist

```
yosys> write_verilog -noattr multiple_module_hier.v
yosys> !gvim multiple_modules_hier.v 
```


My netlist
```
/* Generated by Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os) */

module multiple_modules(a, b, c, y);
  input a;
  input b;
  input c;
  wire net1;
  output y;
  sub_module1 u1 (
    .a(a),
    .b(b),
    .y(net1)
  );
  sub_module2 u2 (
    .a(net1),
    .b(c),
    .y(y)
  );
endmodule

module sub_module1(a, b, y);
  wire _0_;
  wire _1_;
  wire _2_;
  input a;
  input b;

```

No We write flat version of the netlist

```
yosys> flatten
yosys> write_verilog -noattr multiple_modules_flat.v
yosys> !gvim multiple_modules_flat.v
```

Now netlist is shorter

```
/* Generated by Yosys 0.23+35 (git sha1 23e26ff66, clang 14.0.0-1ubuntu1 -fPIC -Os) */

module multiple_modules(a, b, c, y);
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  wire _4_;
  wire _5_;
  input a;
  wire a;
  input b;
  wire b;
  input c;
  wire c;
  wire net1;
  wire \u1.a ;
  wire \u1.b ;
  wire \u1.y ;
  wire \u2.a ;
  wire \u2.b ;
  wire \u2.y ;
  output y;
  wire y;
  sky130_fd_sc_hd__and2_0 _6_ (
    .A(_1_),
    .B(_0_),
    .X(_2_)
  );
  sky130_fd_sc_hd__lpflow_inputiso1p_1 _7_ (
    .A(_4_),
    .SLEEP(_3_),
    .X(_5_)
  );
  assign _4_ = \u2.b ;
  assign _3_ = \u2.a ;
  assign \u2.y  = _5_;
  assign \u2.a  = net1;
  assign \u2.b  = c;
  assign y = \u2.y ;
  assign _1_ = \u1.b ;
  assign _0_ = \u1.a ;
  assign \u1.y  = _2_;
  assign \u1.a  = a;
  assign \u1.b  = b;
  assign net1 = \u1.y ;
endmodule

```

![](Day2/flat.PNG)

## Sub-Module Level Synthesi

Sub-module synthesis is useful when one of the modules appears multiple times and you don't want to synthesize it multiple times.
It is also useful when dividing the system into smaller parts, e.g. when the tool itself does not give good results.


Application example:


```
yosys> read_liberty -lib ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> read_verilog multiple_modules.v
yosys> synth -top multiple_modules 
yosys> abc -liberty ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib 
yosys> flatten
yosys> show 
```

![](Day2/flat2.PNG)

Now we can control which module to syntesis


```
yosys> read_liberty -lib ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> read_verilog multiple_modules.v
yosys> synth -top sub_module1 
```

We control sub-module name by using `synth -top "module_name"`

```
yosys> abc -liberty ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib 
yosys> show 
```

![](Day2/sub_module1.PNG)

## Various Flop Coding Styles and optimization


How to avoid glitch in combinational logic?

To avoid glitch we use flops.


Asynchronous reset: the reset signal does not wait for a clock edge, the output is updated to 0.

Asynchronous set: the set signal does not wait for a clock edge, the output is updated to 1.

A synchronous set or reset is performed relative to the clock edge.

Async reset:

```
$ iverilog dff_asyncres.v tb_dff_asyncres.v
$ ./a.out
$ gtkwave tb_dff_asyncres.vcd
```

![](Day2/asyncres.PNG)

Async set:

```
$ iverilog dff_async_set.v tb_dff_async_set.v
$ ./a.out
$ gtkwave tb_dff_async_set.vcd
```


![](Day2/asyncset.PNG)

Sync reset:

```
$ iverilog dff_syncres.v tb_dff_syncres.v 
$ ./a.out 
$ gtkwave tb_dff_syncres.vc
```


![](Day2/syncres.PNG)


Async reset synthesis.

```
yosys> read_liberty -lib ../lib sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> read_verilog dff_asyncres.v
yosys> synth -top dff_asyncres
```

In flow flops can be in other library. Now we load flops.

```
yosys> dfflibmap -liberty ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> abc -liberty ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> show
```

![](Day2/dffasync.PNG)

## Sync optimization

Optimizing, for example, multiplication by 2 is really a bit shift operation.

![](Day2/mult.PNG)

```
yosys> read_liberty -lib ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> read_verilog mult_2.v
yosys> synth -top mul2

.25. Printing statistics.

=== mul2 ===

   Number of wires:                  2
   Number of wire bits:              7
   Number of public wires:           2
   Number of public wire bits:       7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

4.26. Executing CHECK pass (checking for obvious problems).
Checking module mul2...
Found and reported 0 problems.

```

We don't get hardware/cell for this verilog code.

```
yosys> abc -liberty ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> show
```

![](Day2/mul2.PNG)

# Day 3


In this part of the course, we learned about:

Introduction to Logic Optimisations
- Combinational Logic optimisation: (reduce power and area)
We can use direct optimisation, boolen logic optimisation.
- Sequential logic optimisations
Sequential constant propagation: retiming, sequential logic cloning




## Combinational Logic Optimization

```
yosys> read_liberty -lib ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> read_verilog opt_check.v

yosys> synth -top opt_check


3.25. Printing statistics.

=== opt_check ===

   Number of wires:                  3
   Number of wire bits:              3
   Number of public wires:           3
   Number of public wire bits:       3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $_AND_                          1

3.26. Executing CHECK pass (checking for obvious problems).
Checking module opt_check...
Found and reported 0 problems.

yosys> opt_clean -purge

4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \opt_check..


yosys> abc -liberty ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib

```

We get:
![](Day3/opt1.PNG)

```
yosys> read_verilog opt_check2.v
yosys> synth -top opt_check2
yosys> opt_clean -purge
yosys> abc -liberty ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
```
We get:

![](Day3/opt2.PNG)

Next example:

```
yosys> read_liberty -lib ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> read_verilog opt_check3.v
yosys> synth -top opt_check3
yosys> opt_clean -purge
yosys> abc -liberty ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib

```

![](Day3/opt3.PNG)

For the next modules, before opt -purge, you need to do flatten so that the whole optimization is correct.

## Sequential Logic Optimisations

We learn sequential optimisations on a few examples dff*.

For example diference on dff_const1.v and dff_const2.v.
Verilog showed differences in the behavior of the Q signal after the reset.


![](Day3/dff_1vs2.PNG)


run  example:
```
$ iverilog dff_const1.v tb_dff_const1.v
$ ./a.out 
$ $ gtkwave tb_dff_const1.vcd &
```

![](Day3/dff1.PNG)

Q wait for edg of the clock.

dff_const2 will no wait for clock edge to set Q.


```
yosys> read_liberty -lib ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> read_verilog dff_const1.v
yosys> synth -top dff_const1

3.25. Printing statistics.

=== dff_const1 ===

   Number of wires:                  3
   Number of wire bits:              3
   Number of public wires:           3
   Number of public wire bits:       3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $_DFF_PP0_                      1

yosys> dfflibmap -liberty ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib

yosys> abc -liberty ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib

.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__clkinv_1 cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        1
ABC RESULTS:          output signals:        1
Removing temp directory.

yosys> show
```

![](Day3/dff1s.PNG)

When the above steps are repeated for dff_const2.v the logic will be simplified.


![](Day3/dff2s.PNG)


Example dff_const3.v

Verilog file:
```
module dff_const3(input clk, input reset, output reg q);
reg q1;

always @(posedge clk, posedge reset)
begin
        if(reset)
        begin
                q <= 1'b1;
                q1 <= 1'b0;
        end
        else
        begin
                q1 <= 1'b1;
                q <= q1;
        end
end
```

So Logic can look like this. We need to check if it has been optimized
![](Day3/dff3.PNG)

Run check.

```
$ iverilog dff_const3.v tb_dff_const3.v
$ ./a.out 
VCD info: dumpfile tb_dff_const3.vcd opened for output.
$ gtkwave tb_dff_const3.vcd

```
![](Day3/dff3_iv.PNG)

Run yosys:
```
yosys> read_liberty -lib ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> read_verilog dff_const3.v
yosys> synth -top dff_const3
...
=== dff_const3 ===

   Number of wires:                  4
   Number of wire bits:              4
   Number of public wires:           4
   Number of public wire bits:       4
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $_DFF_PP0_                      1
     $_DFF_PP1_                      1

yosys> dfflibmap -liberty ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> abc -liberty ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
...
5.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__clkinv_1 cells:        2
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        1
ABC RESULTS:          output signals:        2
Removing temp directory.

yosys> show
```
![](Day3/dff3s.PNG)

## Seq optimisation unused outputs.

Logic that does not affect the output of the circuit will be simplified and eliminated.

In this example we can see how circuit can be optimized.

![](Day3/optcout.PNG)

Now we modified ciruit to use all cout signal.

Check for update couter_opt

```
module counter_opt (input clk , input reset , output q);
reg [2:0] count;
assign q = (count[2:0] == 3'b100);

always @(posedge clk ,posedge reset)
begin
        if(reset)
                count <= 3'b000;
        else
                count <= count + 1;
end

endmodule

```



```
yosys> read_liberty -lib ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> read_verilog counter_opt2.v
yosys> synth -top counter_opt
...
=== counter_opt ===

   Number of wires:                  8
   Number of wire bits:             14
   Number of public wires:           4
   Number of public wire bits:       6
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  9
     $_ANDNOT_                       1
     $_AND_                          1
     $_DFF_PP0_                      3
     $_NOT_                          1
     $_OR_                           1
     $_XOR_                          2

We expect 3 flops.

yosys> dfflibmap -liberty ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> abc -liberty ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
...
7.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__nor3b_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand2_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xor2_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xnor2_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__clkinv_1 cells:        4
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        7

```

![](Day3/opt_couts.PNG)



# Day 4


## Gate level simulations, Non blocking and blocking assignments, Synthesis-Simulation mismatch.



What is GLS? (Gate Level Simulation)
* Running the test bench with Netlist as Design Under Test
* Netlist is logically same as RTL Code
* Same Tes Bench will align with the Design

Why GLS?
* Verify the logical correctness of design after synthesis
* Ensuring the timing of the design is met.
* For this GLS needs to run with delay annotation.


GLS using IVERILOG

![](Day4/gls.PNG)

Note:
```
If the Gate Levwl Models are delay annotated, then we can use GLS for timing validation
```

Synthesis Simulation Mismatch
* Missing sensitivity List
* Blocking vs Non-Blocking Assigments
* Non Standard Verilog Coding

Missing sensitivity List:
Simulator works by looking on inputs if inputs don't change output will settle.
For example in module mux we have always @(sel) but but it is not sensitivity to all imputs but only to sel it should be always @(*) to be sensitivity to all imputs.

Blocking vs Non-Blocking Assigments:
- Inside always block
- = ->Blocking
	- Executes the statments in the order it is written
	- So the first statement is evaluated before the second statment
- <= Non Blocking

	-Executes all the RHS when always block is entered adn assigns to LHS
	- Parallel evaluation



ternary_operator_mux:
```
module ternary_operator_mux (input i0 , input i1 , input sel , output y);
        assign y = sel?i1:i0;
        endmodule
```

Run iverilog:
```
$ iverilog ternary_operator_mux.v tb_ternary_operator_mux.v
$ ./a.out 
VCD info: dumpfile tb_ternary_operator_mux.vcd opened for output.
$ gtkwave tb_ternary_operator_mux.vcd
```

![](Day4/mux1.PNG)
now run synth for this.

```
yosys> read_liberty -lib ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> read_verilog ternary_operator_mux.v 
yosys> synth -top ternary_operator_mux
...
=== ternary_operator_mux ===

   Number of wires:                  4
   Number of wire bits:              4
   Number of public wires:           4
   Number of public wire bits:       4
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $_MUX_                          1
     
yosys> abc -liberty ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> write_verilog -noattr ternary_operator_mux_net.v
yosys> show
```

![](Day4/mux1s.PNG)

Run GLS.

```
$ iverilog ../my_lib/verilog_model/primitives.v ../my_lib/verilog_model/sky130_fd_sc_hd.v ternary_operator_mux_net.v tb_ternary_operator_mux.v
 ./a.out 
VCD info: dumpfile tb_ternary_operator_mux.vcd opened for output.
$ gtkwave tb_ternary_operator_mux.vcd
```

![](Day4/mux1sim.PNG)

Test bad_mux:
```
module bad_mux (input i0 , input i1 , input sel , output reg y);
always @ (sel)
begin
        if(sel)
                y <= i1;
        else
                y <= i0;
end
endmodule
```

iverilog:
```
$ iverilog bad_mux.v tb_bad_mux.v
$ ./a.out 
VCD info: dumpfile tb_bad_mux.vcd opened for output.
$ gtkwave tb_bad_mux.vcd
```

Looks like it don't woek as mux.

![](Day4/bad_mux1.PNG)

Now run synth.
```
yosys> read_liberty -lib ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> read_verilog bad_mux.v
yosys> synth -top bad_mux
...
=== bad_mux ===

   Number of wires:                  4
   Number of wire bits:              4
   Number of public wires:           4
   Number of public wire bits:       4
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $_MUX_                          1

yosys> abc -liberty ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> write_verilog -noattr bad_mux_net.v


$ iverilog ../my_lib/verilog_model/primitives.v ../my_lib/verilog_model/sky130_fd_sc_hd.v bad_mux_net.v tb_bad_mux.v
$ ./a.out 
VCD info: dumpfile tb_bad_mux.vcd opened for output.
$ gtkwave tb_bad_mux.vcd

```

![](Day4/bad_mux2.PNG)

Example blocking_caveat:

```
module blocking_caveat (input a , input b , input  c, output reg d);
reg x;
always @ (*)
begin
        d = x & c;
        x = a | b;
end
endmodule

```
![](Day4/blocking1.PNG)

```
$ iverilog blocking_caveat.v tb_blocking_caveat.v 
 ./a.out 
VCD info: dumpfile tb_blocking_caveat.vcd opened for output.

$ gtkwave tb_blocking_caveat.vcd&
```

Looks like it look for post value 
![](Day4/blocking2.PNG)

```
yosys> read_liberty -lib ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib 
yosys> read_verilog blocking_caveat.v
yosys> synth -top blocking_caveat
yosys> abc -liberty ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> write_verilog -noattr blocking_caveat_net.v
```
![](Day4/blocking3.PNG)

Run GLS:
```
$ iverilog ../my_lib/verilog_model/primitives.v  ../my_lib/verilog_model/sky130_fd_sc_hd.v blocking_caveat_net.v tb_blocking_caveat.v
$ ./a.out 
VCD info: dumpfile tb_blocking_caveat.vcd opened for output.
$ gtkwave tb_blocking_caveat.vcd&
```
Compare outputs of verilog and GLS. it is synth sim mismatch by blocking statements.
![](Day4/blocking4.PNG)


# Day 5

##  If, case, for loop and for generate

### if statement

```
if(cond1)
begin
...c1
end
else if(cond2)
	begin
	...c2
	end
...
```
The first if has the highest priority, and only if the condition is false, subsequent ifs are evaluated.
In hardware, we can represent it as a cascade of muxes.

![](Day5/mux1.PNG)


### inferred latch 

Due to bad code and not foreseeing all possibilities for if a latch will be generated giving this value combinations which is not intended.

https://stackoverflow.com/questions/22459413/what-is-inferred-latch-and-how-it-is-created-when-it-is-missing-else-statement-i



![](Day5/badif.PNG)

However, in the case of, for example, a counter, this behavior is normal because you need a latch to store the value of the counter in the case of enabl set is 0.

![](Day5/counter.PNG)


### case statement

If, case statements are used inside always block. In verilog whatever variable we use to in if or case statements must be a register variable.

```
always@(*)
begin
case(sel)
    2'b00: c1;
    2'b01: c2;
endcase
end
```

In HW it will create mux.

Some caveats with using case:

- Incomplete case

HW will creaate latch if we dont code all cases.

![](Day5/latch1.PNG)

Solution will be code case with deafault.

- Partial assignments

```
reg[1:0] sel;
reg x, y;
alwasys @(*)
begin
	case(sel)
		2'b00: begin
				x=a;
				y=b;
		        end
		2'b01: begin
				x=x;
				end
		default: begin
				x=d;
				y=b;
		        end
	endcase
```

The problem is the lack of assigning a value of y for a particular case.

- Overlapping cases

```
case(sel)
		2'b00: begin
				...
		        end
		2'b01: begin
				...
				end
		2'b10: begin
				...
				end
		2'b1?: begin
				...
				end

```

2'b1?: LSB can by 0 or 1.
This creates the problem of an unpredictable result because the cases overlap. this is an example of bad code


### Lab inferred latch

```
module incomp_if (input i0 , input i1 , input i2 , output reg y);
always @ (*)
begin
        if(i0)
                y <= i1;
end
endmodule
```

run iverilog:

```
$ iverilog incomp_if.v tb_incomp_if.v
$ ./a.out 
VCD info: dumpfile tb_incomp_if.vcd opened for output.
$ gtkwave tb_incomp_if.vcd&
```

![](Day5/lab1_1.PNG)

When i0 go low y will set previous valu of y until io go high. It woar as latch.

```
yosys> read_liberty -lib ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> read_verilog incomp_if.v
yosys> synth -top incomp_if
yosys> abc -liberty ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> show
```

![](Day5/lab1_2.PNG)

next example


```
module incomp_if2 (input i0 , input i1 , input i2 , input i3, output reg y);
always @ (*)
begin
        if(i0)
                y <= i1;
        else if (i2)
                y <= i3;

end
endmodule
```


```
$ iverilog incomp_if2.v tb_incomp_if2.v
$ ./a.out 
VCD info: dumpfile tb_incomp_if2.vcd opened for output.
$ gtkwave tb_incomp_if2.vcd&
```

![](Day5/lab1_3.PNG)

```
yosys> read_liberty -lib ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> read_verilog incomp_if2.v
yosys> synth -top incomp_if2
yosys> abc -liberty ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> show
```

![](Day5/lab1_4.PNG)

### Lab incomplete case

```
module incomp_case (input i0 , input i1 , input i2 , input [1:0] sel, output reg y);
always @ (*)
begin
        case(sel)
                2'b00 : y = i0;
                2'b01 : y = i1;
        endcase
end
endmodule
```

```
$ iverilog incomp_case.v tb_incomp_case.v 
$ ./a.out 
VCD info: dumpfile tb_incomp_case.vcd opened for output.

```

![](Day5/lab2_1.PNG)

```
yosys> read_liberty -lib ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib 
yosys> read_verilog incomp_case.v 
yosys> synth -top incomp_case 
yosys> abc -liberty ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> show
```


![](Day5/lab2_2.PNG)

fix will be

```
module comp_case (input i0 , input i1 , input i2 , input [1:0] sel, output reg y);
always @ (*)
begin
        case(sel)
                2'b00 : y = i0;
                2'b01 : y = i1;
                default : y = i2;
        endcase
end
endmodule
```

This will aynth without latch.

### Lab partial case

```
module partial_case_assign (input i0 , input i1 , input i2 , input [1:0] sel, output reg y , output reg x);
always @ (*)
begin
        case(sel)
                2'b00 : begin
                        y = i0;
                        x = i2;
                        end
                2'b01 : y = i1;
                default : begin
                           x = i1;
                           y = i2;
                          end
        endcase
end
endmodule
```

for `2'b01` we dont set value for `x` this will cause of use latch in HW.

```
yosys> read_liberty -lib ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> read_verilog partial_case_assign.v
yosys> synth -top partial_case_assign 
yosys> abc -liberty ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> show
```

![](Day5/lab3.PNG)

### Lab bad case

```
module bad_case (input i0 , input i1, input i2, input i3 , input [1:0] sel, output reg y);
always @(*)
begin
        case(sel)
                2'b00: y = i0;
                2'b01: y = i1;
                2'b10: y = i2;
                2'b1?: y = i3;
                //2'b11: y = i3;
        endcase
end

endmodule
```


`2'b1?` can confused simulator.

```
$ iverilog bad_case.v tb_bad_case.v
$ ./a.out 
VCD info: dumpfile tb_bad_case.vcd opened for output.
$ gtkwave tb_bad_case.vcd
```

![](Day5/lab4.PNG)

```
yosys> read_liberty -lib ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> read_verilog bad_case.v
yosys> synth -top bad_case
...
=== bad_case ===

   Number of wires:                 15
   Number of wire bits:             16
   Number of public wires:           6
   Number of public wire bits:       7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $_ANDNOT_                       3
     $_AND_                          1
     $_MUX_                          1
     $_ORNOT_                        2
     $_OR_                           3

yosys> abc -liberty ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> write_verilog bad_case_net.v

```

![](Day5/lab5.PNG)

run GLS

```
$ iverilog ../my_lib/verilog_model/primitives.v ../my_lib/verilog_model/sky130_fd_sc_hd.v bad_case_net.v tb_bad_case.v
$ ./a.out 
VCD info: dumpfile tb_bad_case.vcd opened for output.
$ gtkwave tb_bad_case.vcd&
```

Now we see on secend plots `y` output without latch function.
We need be carefull during coding to avoid this mismach.

![](Day5/lab6.PNG)

## Looping constructs
For loop
- Use inside always block
- Evaluating expression

Generate for loop
- Use outside always block
- Instantiate hardware multiple times

mux_generate example:

```
module mux_generate (input i0 , input i1, input i2 , input i3 , input [1:0] sel  , output reg y);
wire [3:0] i_int;
assign i_int = {i3,i2,i1,i0};
integer k;
always @ (*)
begin
for(k = 0; k < 4; k=k+1) begin
        if(k == sel)
                y = i_int[k];
end
end
endmodule
```

```
$ iverilog mux_generate.v tb_mux_generate.v
$ ./a.out 
VCD info: dumpfile tb_mux_generate.vcd opened for output.
$ gtkwave tb_mux_generate.vcd
```

![](Day5/lab7.PNG)

The output signal coincides with the signal selected by select.

demux_generate example:
This is an example of the usual for only the file is named confusingly

```
module demux_generate (output o0 , output o1, output o2 , output o3, output o4, output o5, output o6 , output o7 , input [2:0] sel  , input i);
reg [7:0]y_int;
assign {o7,o6,o5,o4,o3,o2,o1,o0} = y_int;
integer k;
always @ (*)
begin
y_int = 8'b0;
for(k = 0; k < 8; k++) begin
        if(k == sel)
                y_int[k] = i;
end
end
endmodule

```

```
$ iverilog demux_generate.v tb_demux_generate.v
$ ./a.out 
VCD info: dumpfile tb_demux_generate.vcd opened for output.
$ gtkwave tb_demux_generate.vcd
```

![](Day5/lab8.PNG)

RCA example:
RCA is a good example of hardware multiplication.

```
module fa (input a , input b , input c, output co , output sum);
        assign {co,sum}  = a + b + c ;
endmodule

```

```
module rca (input [7:0] num1 , input [7:0] num2 , output [8:0] sum);
wire [7:0] int_sum;
wire [7:0]int_co;

genvar i;
generate
        for (i = 1 ; i < 8; i=i+1) begin
                fa u_fa_1 (.a(num1[i]),.b(num2[i]),.c(int_co[i-1]),.co(int_co[i]),.sum(int_sum[i]));
        end

endgenerate
fa u_fa_0 (.a(num1[0]),.b(num2[0]),.c(1'b0),.co(int_co[0]),.sum(int_sum[0]));


assign sum[7:0] = int_sum;
assign sum[8] = int_co[7];
endmodule

```

```
$ iverilog fa.v rca.v tb_rca.v
$ ./a.out 
VCD info: dumpfile tb_rca.vcd opened for output.
$ gtkwave tb_rca.vcd

```


![](Day5/lab9.PNG)

run yosys

```
yosys> read_liberty -lib ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> read_verilog fa.v rca.v
yosys> synth -top rca
...
=== design hierarchy ===

   rca                               1
     fa                              8

   Number of wires:                 69
   Number of wire bits:            105
   Number of public wires:          45
   Number of public wire bits:      81
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 40
     $_ANDNOT_                       8
     $_AND_                          8
     $_OR_                           8
     $_XNOR_                        16


yosys> abc -liberty ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
...
5.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__maj3_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xor3_1 cells:        1
ABC RESULTS:        internal signals:        3
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        2
Removing temp directory.


yosys> write_verilog -noattr rca_net.v
yosys> show rca

```
![](Day5/rca.PNG)

GLS:

```
$ iverilog ../my_lib/verilog_model/primitives.v  ../my_lib/verilog_model/sky130_fd_sc_hd.v rca_net.v tb_rca.v
$ ./a.out 
VCD info: dumpfile tb_rca.vcd opened for output.
$ gtkwave tb_rca.vcd

```
![](Day5/rca2.PNG)

***

# Design Name

As a project, I wanted to choose a relatively simple layout that on the one hand will allow me to familiarize myself with the entire flow and on the other hand will not take me a lot of time to analyze and implement it.

I choose one of the proposed projects:

## iiitb_freqdiv - Frequency Divider
This is a frequency divider model which provide frequency division upto 16 of the input clock.

https://github.com/DantuNandiniDevi/iiitb_freqdiv

***
# Day 6

Create copy of  github repo.

```
$ mkdir my_design
$ cd my_design/
$ git clone https://github.com/DantuNandiniDevi/iiitb_freqdiv

```


run iverilog

```
$ iverilog iiitb_freqdiv.v iiitb_freqdiv_tb.v
$ ./a.out 
VCD info: dumpfile iiitb_freqdiv_vcd.vcd opened for output.
$ gtkwave iiitb_freqdiv_vcd.vcd

```

![](Day6/fdivverilog.PNG)

run synth:

```
yosys> read_liberty -lib ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> read_verilog iiitb_freqdiv.v
yosys> synth -top iiitb_freqdiv
...
3.25. Printing statistics.

=== iiitb_freqdiv ===

   Number of wires:                119
   Number of wire bits:            140
   Number of public wires:           6
   Number of public wire bits:      15
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                126
     $_ANDNOT_                      47
     $_AND_                          2
     $_MUX_                          1
     $_NAND_                         5
     $_NOR_                          4
     $_NOT_                          7
     $_ORNOT_                        3
     $_OR_                          19
     $_SDFF_NN0_                     4
     $_SDFF_PN0_                     4
     $_XNOR_                         6
     $_XOR_                         24


...

yosys> dfflibmap -liberty ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> abc -liberty ../lib/sky130_fd_sc_hd__tt_025C_1v80.lib
yosys> stat
...
=== iiitb_freqdiv ===

   Number of wires:                200
   Number of wire bits:            221
   Number of public wires:           6
   Number of public wire bits:      15
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 63
     sky130_fd_sc_hd__a211oi_1       1
     sky130_fd_sc_hd__a21oi_1        1
     sky130_fd_sc_hd__a22oi_1        1
     sky130_fd_sc_hd__a31oi_1        2
     sky130_fd_sc_hd__and2_0         2
     sky130_fd_sc_hd__and3_1         1
     sky130_fd_sc_hd__and3b_1        1
     sky130_fd_sc_hd__clkinv_1       8
     sky130_fd_sc_hd__dfxtp_1        8
     sky130_fd_sc_hd__maj3_1         2
     sky130_fd_sc_hd__nand2_1        4
     sky130_fd_sc_hd__nand2b_1       2
     sky130_fd_sc_hd__nor2_1         8
     sky130_fd_sc_hd__nor2b_1        2
     sky130_fd_sc_hd__nor3_1         3
     sky130_fd_sc_hd__nor3b_1        2
     sky130_fd_sc_hd__nor4_1         1
     sky130_fd_sc_hd__nor4b_1        1
     sky130_fd_sc_hd__nor4bb_1       1
     sky130_fd_sc_hd__o21ai_0        4
     sky130_fd_sc_hd__o221ai_1       1
     sky130_fd_sc_hd__o22ai_1        1
     sky130_fd_sc_hd__o311ai_0       1
     sky130_fd_sc_hd__o32ai_1        1
     sky130_fd_sc_hd__xnor2_1        2
     sky130_fd_sc_hd__xor2_1         2

...
yosys> write_verilog iiitb_freqdiv_net.v
yosys> show
```

![](Day6/fix.PNG)

```
$ iverilog  -DFUNCTIONAL -DUNIT_DELAY=#1 ../verilog_model/primitives.v ../verilog_model/sky130_fd_sc_hd.v iiitb_freqdiv_net.v iiitb_freqdiv_tb.v

$ ./a.out 
VCD info: dumpfile iiitb_freqdiv_vcd.vcd opened for output.
$ gtkwave iiitb_freqdiv_vcd.vcd &

```

![](Day6/post_1.PNG)

![](Day6/post_2.PNG)

***
# Day 7

***
# Day 8